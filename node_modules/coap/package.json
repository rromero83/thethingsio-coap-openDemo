{
  "name": "coap",
  "version": "0.8.0",
  "description": "A CoAP library for node modelled after 'http'",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/.bin/mocha --bail --reporter spec 2>&1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mcollina/node-coap.git"
  },
  "pre-commit": [
    "test"
  ],
  "keywords": [
    "coap",
    "m2m",
    "iot",
    "client",
    "server",
    "udp",
    "observe",
    "internet of things",
    "messaging"
  ],
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "license": "MIT",
  "devDependencies": {
    "pre-commit": "0.0.9",
    "chai": "~1.9.1",
    "mocha": "~1.21.4",
    "timekeeper": "0.0.4",
    "sinon": "~1.7.3"
  },
  "dependencies": {
    "bl": "~0.9.0",
    "coap-packet": "~0.1.12",
    "lru-cache": "~2.5.0"
  },
  "readme": "node-coap\n=====\n\n[![Build\nStatus](https://travis-ci.org/mcollina/node-coap.png)](https://travis-ci.org/mcollina/node-coap)\n[![gitter](https://badges.gitter.im/mcollina/node-coap.png)](https://gitter.im/mcollina/node-coap)\n\n__node-coap__ is a client and server library for CoAP modelled after the `http` module.\n\n  * <a href=\"#intro\">Introduction</a>\n  * <a href=\"#install\">Installation</a>\n  * <a href=\"#basic\">Basic Example</a>\n  * <a href=\"#api\">API</a>\n  * <a href=\"#contributing\">Contributing</a>\n  * <a href=\"#licence\">Licence &amp; copyright</a>\n\n[![NPM](https://nodei.co/npm/coap.png)](https://nodei.co/npm/coap/)\n\n[![NPM](https://nodei.co/npm-dl/coap.png)](https://nodei.co/npm/coap/)\n\n<a name=\"intro\"></a>\n## Introduction\n\nWhat is CoAP?\n> Constrained Application Protocol (CoAP) is a software protocol\nintended to be used in very simple electronics devices that allows them\nto communicate interactively over the Internet. -  Wikipedia\n\nThis library follows:\n* [draft-18](http://tools.ietf.org/html/draft-ietf-core-coap-18) of CoAP.\n* [observe-11](http://tools.ietf.org/html/draft-ietf-core-observe-11)\n  for the observe specification.\n* [block-14](http://tools.ietf.org/id/draft-ietf-core-block-14.txt) for\n  the blockwise specification.\n\nIt does not parse the protocol but it use\n[CoAP-packet](http://github.com/mcollina/coap-packet) instead.\n\nIf you need a command line interface for CoAP, check out\n[coap-cli](http://github.com/mcollina/coap-cli).\n\n**node-coap** is an **OPEN Open Source Project**, see the <a href=\"#contributing\">Contributing</a> section to find out what this means.\n\nThis has been tested only on node v0.10.\n\n<a name=\"install\"></a>\n## Installation\n\n```\n$ npm install coap --save\n```\n\n<a name=\"basic\"></a>\n## Basic Example\n\nThe following example opens a UDP server and sends a\nCoAP message to it:\n\n```js\nconst coap        = require('coap')\n    , server      = coap.createServer()\n\nserver.on('request', function(req, res) {\n  res.end('Hello ' + req.url.split('/')[1] + '\\n')\n})\n\n// the default CoAP port is 5683\nserver.listen(function() {\n  var req = coap.request('coap://localhost/Matteo')\n\n  req.on('response', function(res) {\n    res.pipe(process.stdout)\n    res.on('end', function() {\n      process.exit(0)\n    })\n  })\n\n  req.end()\n})\n```\n\nor on IPv6:\n\n```js\nconst coap        = require('coap')\n    , server      = coap.createServer({ type: 'udp6' })\n\nserver.on('request', function(req, res) {\n  res.end('Hello ' + req.url.split('/')[1] + '\\n')\n})\n\n// the default CoAP port is 5683\nserver.listen(function() {\n  var req = coap.request('coap://[::1]/Matteo')\n\n  req.on('response', function(res) {\n    res.pipe(process.stdout)\n    res.on('end', function() {\n      process.exit(0)\n    })\n  })\n\n  req.end()\n})\n```\n\n<a name=\"api\"></a>\n## API\n\n  * <a href=\"#request\"><code>coap.<b>request()</b></code></a>\n  * <a href=\"#createServer\"><code>coap.<b>createServer()</b></code></a>\n  * <a href=\"#incoming\"><code>IncomingMessage</b></code></a>\n  * <a href=\"#outgoing\"><code>OutgoingMessage</b></code></a>\n  * <a href=\"#observeread\"><code>ObserveReadStream</b></code></a>\n  * <a href=\"#observewrite\"><code>ObserveWriteStream</b></code></a>\n  * <a href=\"#registerOption\"><code>coap.<b>registerOption()</b></code></a>\n  * <a href=\"#registerFormat\"><code>coap.<b>registerFormat()</b></code></a>\n  * <a href=\"#agent\"><code>coap.<b>Agent</b></code></a>\n  * <a href=\"#globalAgent\"><code>coap.<b>globalAgent</b></code></a>\n  * <a href=\"#globalAgentIPv6\"><code>coap.<b>globalAgentIPv6</b></code></a>\n\n-------------------------------------------------------\n<a name=\"request\"></a>\n### request(url)\n\nExecute a CoAP request. `url` can be a string or an object.\nIf it is a string, it is parsed using `require('url').parse(url)`.\nIf it is an object:\n\n- `host`: A domain name or IP address of the server to issue the request\n  to.\n  Defaults to `'localhost'`.\n- `hostname`: To support `url.parse()` `hostname` is preferred over\n  `host`\n- `port`: Port of remote server. Defaults to 5683.\n- `method`: A string specifying the CoAP request method. Defaults to\n  `'GET'`.\n- `confirmable`: send a CoAP confirmable message (CON), defaults to\n  `true`.\n- `observe`: send a CoAP observe message, allowing the streaming of\n  updates from the server.\n- `pathname`: Request path. Defaults to `'/'`. Should not include query string\n- `query`: Query string. Defaults to `''`. Should not include the path,\n  e.g. 'a=b&c=d'\n- `options`: object that includes the CoAP options, for each key-value\n  pair the [setOption()](#setOption) will be called.\n- `headers`: alias for `options`, but it works only if `options` is\n  missing.\n- `agent`: Controls [`Agent`](#agent) behavior. Possible values:\n  * `undefined` (default): use [`globalAgent`](#globalAgent), a single socket for all\n    concurrent requests.\n  * [`Agent`](#agent) object: explicitly use the passed in [`Agent`](#agent).\n  * `false`: opts out of socket reuse with an [`Agent`](#agent), each request uses a\n    new UDP socket.\n\n`coap.request()` returns an instance of <a\nhref='#incoming'><code>IncomingMessage</code></a>.\nIf you need\nto add a payload, just `pipe` into it.\nOtherwise, you __must__ call `end` to submit the request.\n\nIf `hostname` is a IPv6 address then the payload is sent through a\nIPv6 UDP socket, dubbed in node.js as `'udp6'`.\n\n#### Event: 'response'\n\n`function (response) { }`\n\nEmitted when a response is received.\n`response` is\nan instance of <a\nhref='#incoming'><code>IncomingMessage</code></a>.\n\nIf the `observe` flag is specified, the `'response'` event\nwill return an instance of\n <a href='#observeread'><code>ObserveReadStream</code></a>.\nWhich represent the updates coming from the server, according to the\n[observe spec](http://tools.ietf.org/html/draft-ietf-core-observe-11).\n\n-------------------------------------------------------\n<a name=\"createServer\"></a>\n### createServer([requestListener])\n\nReturns a new CoAP Server object.\n\nThe `requestListener` is a function which is automatically\nadded to the `'request'` event.\n\n#### Event: 'request'\n\n`function (request, response) { }`\n\nEmitted each time there is a request. \n`request` is an instance of <a\nhref='#incoming'><code>IncomingMessage</code></a> and `response` is\nan instance of <a\nhref='#outgoing'><code>OutgoingMessage</code></a>.\n\nIf the `observe` flag is specified, the `response` variable\nwill return an instance of <a href='#observewrite'><code>ObserveWriteStream</code></a>.\nEach `write(data)` to the stream will cause a new observe message sent\nto the client.\n\n#### server.listen(port, [address], [callback])\n\nBegin accepting connections on the specified port and hostname.  If the\nhostname is omitted, the server will accept connections directed to any\nIPv4 or IPv6 address by passing `null` as the address to the underlining socket.\n\nTo listen to a unix socket, supply a filename instead of port and hostname.\n\nThis function is asynchronous.\n\n#### server.close([callback])\n\nCloses the server.\n\nThis function is synchronous, but it provides an asynchronous callback\nfor convenience.\n\n-------------------------------------------------------\n<a name=\"outgoing\"></a>\n### OutgoingMessage\n\nAn `OutgoingMessage` object is returned by `coap.request` or\nemitted by the `coap.createServer` `'response'` event.\nIt may be used to access response status, headers and data.\n\nIt implements the [Writable\nStream](http://nodejs.org/api/stream.html#stream_class_stream_writable) interface, as well as the\nfollowing additional methods and properties.\n\n#### message.code\n\nThe CoAP code ot the message.\nIt is HTTP-compatible, as it can be passed `404`.\n\n#### message.statusCode\n\n(same as message.code)\n\n<a name=\"setOption\"></a>\n#### message.setOption(name, value)\n\nSets a single option value.\nAll the options are in binary format, except for\n`'Content-Format'`, `'Accept'` and `'ETag'`.\nSee <a href='#registerOption'><code>registerOption</code></a>\n to know how to register more.\n\nUse an array of buffers\nif you need to send multiple options with the same name.\n\nIf you need to pass a custom option, pass a string containing a\na number as key and a `Buffer` as value.\n\nExample:\n\n    message.setOption(\"Content-Format\", \"application/json\");\n\nor\n\n    message.setOption(\"555\", [new Buffer('abcde',\nnew Buffer('ghi')]);\n\n`setOption` is also aliased as `setHeader` for HTTP API\ncompatibility.\n\nAlso, `'Content-Type'` is aliased to `'Content-Format'` for HTTP\ncompatibility.gg\n\nSince v0.7.0, this library supports blockwise transfers, you can trigger\nthem by adding a `req.setOption('Block2', new Buffer([0x2]))` to the\noutput of [request](#request).\n\nSee the\n[spec](http://tools.ietf.org/html/draft-ietf-core-coap-18#section-5.4)\nfor all the possible options.\n\n-------------------------------------------------------\n<a name=\"incoming\"></a>\n### IncomingMessage\n\nAn `IncomingMessage` object is created by `coap.createServer` or\n`coap.request`\nand passed as the first argument to the `'request'` and `'response'` event\nrespectively. It may be used to access response status, headers and data.\n\nIt implements the [Readable\nStream](http://nodejs.org/api/stream.html#stream_class_stream_readable) interface, as well as the\nfollowing additional methods and properties.\n\n#### message.payload\n\nThe full payload of the message, as a Buffer.\n\n#### message.options\n\nAll the CoAP options, as parsed by\n[CoAP-packet](http://github.com/mcollina/coap-packet).\n\nAll the options are in binary format, except for\n`'Content-Format'`, `'Accept'` and `'ETag'`.\nSee <a href='#registerOption'><code>registerOption()</code></a> to know how to register more.\n\nSee the\n[spec](http://tools.ietf.org/html/draft-ietf-core-coap-18#section-5.4)\nfor all the possible options.\n\n#### message.headers\n\nAll the CoAP options that can be represented in a human-readable format.\nCurrently they are only `'Content-Format'`, `'Accept'` and\n`'ETag'`.\nSee <a href='#registerOption'> to know how to register more.\n\nAlso, `'Content-Type'` is aliased to `'Content-Format'` for HTTP\ncompatibility.\n\n#### message.code\n\nThe CoAP code of the message.\n\n#### message.method\n\nThe method of the message, it might be\n`'GET'`, `'POST'`, `'PUT'`, `'DELETE'` or `null`.\nIt is null if the CoAP code cannot be parsed into a method, i.e. it is\nnot in the '0.' range.\n\n#### message.url\n\nThe URL of the request, e.g.\n`'coap://localhost:12345/hello/world?a=b&b=c'`.\n\n#### message.rsinfo\n\nThe sender informations, as emitted by the socket.\nSee [the `dgram` docs](http://nodejs.org/api/dgram.html#dgram_event_message) for details\n\n-------------------------------------------------------\n<a name=\"observeread\"></a>\n### ObserveReadStream\n\nAn `ObserveReadStream` object is created by `coap.request` to handle\n_observe_ requests.\nIt is passed as the first argument to the `'response'` event.\nIt may be used to access response status, headers and data as they are\nsent by the server.\n__Each new observe message from the server is a new `'data'` event__.\n\nIt implements the [Readable\nStream](http://nodejs.org/api/stream.html#stream_class_stream_readable)\nand [IncomingMessage](#incoming) interfaces, as well as the\nfollowing additional methods, events and properties.\n\n#### close()\n\nCloses the stream.\n\n-------------------------------------------------------\n<a name=\"observewrite\"></a>\n### ObserveWriteStream\n\nAn `ObserveWriteStream` object is \nemitted by the `coap.createServer` `'response'` event as a response\nobject.\nIt may be used to set response status, headers and stream changing data\nto the client.\n\nEach new `write()` call is a __new message__ being sent to the client.\n\nIt implements the [Writable\nStream](http://nodejs.org/api/stream.html#stream_class_stream_writable)\nand [OutgoingMessage](#outgoing) interfaces, as well as the\nfollowing additional methods and properties.\n\n#### Event: 'finish'\n\nEmitted when the client is not sending 'acks' anymore for the sent\nmessages.\n\n-------------------------------------------------------\n<a name=\"registerOption\"></a>\n### coap.registerOption(name, toBinary, toString)\n\nRegister a new option to be converted to string and added to the\n`message.headers`.\n`toBinary` is a function that accept a string and returns a `Buffer`.\n`toString` is a function that accept a `Buffer` and returns a `String`.\n\n-------------------------------------------------------\n<a name=\"registerFormat\"></a>\n### coap.registerFormat(name, value)\n\nRegister a new format to be interpreted and sent in CoAP\n`Content-Format` option.\nEach format is identified by a number, see the [Content-Format\nregistry](http://tools.ietf.org/html/draft-ietf-core-coap-18#section-12.3).\n\nThese are the defaults formats:\n```js\nregisterFormat('text/plain', 0)\nregisterFormat('application/link-format', 40)\nregisterFormat('application/xml', 41)\nregisterFormat('application/octet-stream', 42)\nregisterFormat('application/exi', 47)\nregisterFormat('application/json', 50)\n```\n\n-------------------------------------------------------\n<a name=\"agent\"></a>\n### coap.Agent([opts])\n\nAn Agent encapsulate an UDP Socket. It uses a combination of `messageId`\nand `token` to distinguish between the different exchanges.\nThe socket will auto-close itself when no more exchange are in place.\n\nBy default, no UDP socket are open, and it is opened on demand to send\nthe messages.\n\nOpts is an optional object with the following optional properties:\n\n* `type`: `'udp4'` or `'udp6'` if we want an Agent on an IPv4 or IPv6\n  UDP socket.\n\n-------------------------------------------------------\n<a name=\"globalAgent\"></a>\n### coap.globalAgent\n\nThe default [`Agent`](#agent) for IPv4.\n\n-------------------------------------------------------\n<a name=\"globalAgentIPv6\"></a>\n### coap.globalAgentIPv6\n\nThe default [`Agent`](#agent) for IPv6.\n\n<a name=\"contributing\"></a>\n## Contributing\n\n__node-coap__ is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [CONTRIBUTING.md](https://github.com/mcollina/node-coap/blob/master/CONTRIBUTING.md) file for more details.\n\n## Limitations\n\nThe maximum packet size is 1280, as the\n[blockwise](http://datatracker.ietf.org/doc/draft-ietf-core-block/) is\nnot supported yet.\n\n## Contributors\n\n__node-coap__ is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align=\"left\">Matteo Collina</th><td><a href=\"https://github.com/mcollina\">GitHub/mcollina</a></td><td><a href=\"https://twitter.com/matteocollina\">Twitter/@matteocollina</a></td></tr>\n<tr><th align=\"left\">Nguyen Quoc Dinh</th><td><a href=\"https://github.com/nqd\">GitHub/nqd</a></td><td><a href=\"https://twitter.com/nqdinh\">Twitter/@nqdinh</a></td></tr>\n</tbody></table>\n\n## LICENSE\n\nMIT, see LICENSE.md file.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mcollina/node-coap/issues"
  },
  "_id": "coap@0.8.0",
  "dist": {
    "shasum": "1f339ef5ae7113b779e8169e81f0dd6e4de7798d"
  },
  "_from": "coap@0.8.0",
  "_resolved": "https://registry.npmjs.org/coap/-/coap-0.8.0.tgz"
}
